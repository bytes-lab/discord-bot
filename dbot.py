import re
import discord
import requests

import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as mticker
from mpl_finance import candlestick_ohlc

from config import *

client = discord.Client()

PREFIX = '!'

url = 'https://api.coingecko.com/api/v3/coins/list'
coins = requests.get(url).json()
COINS = { ii['symbol']: ii['id'] for ii in coins }

url = 'https://api.coincap.io/v2/assets'
coins = requests.get(url).json()['data']
RCOINS = { ii['symbol']: { 'rank': ii['rank'], 'market_cap': ii['marketCapUsd'] } for ii in coins }


@client.event
async def on_ready():
    print("The bot is ready!")
    await client.change_presence(game=discord.Game(name="Making a bot"))

def getEmoji(val):
    if val > 0:
        return u'\U0001f440'
    else:
        return u'\U0001f62f'

@client.event
async def on_message(message):
    if message.author == client.user:
        return
    if message.content.startswith(PREFIX):
        msg = message.content.strip(PREFIX)
        match = re.search(r'[pP] (\w+)', msg)
        if match:
            symbol = match.group(1).lower()
            if symbol not in COINS:
                res = "```This coin is not listed on exchanges we support ðŸ˜¶```"
            else:
                url = 'https://api.coingecko.com/api/v3/coins/{}?localization=false&sparkline=false'.format(COINS[symbol])
                info = requests.get(url).json()
                res = "```{symbol} = ${usd_price:,.2f} |  {btc_price:.8f} BTC\n1h   {usd_1h: 6.2f}%     {emo_1h}\n24h  {usd_24h: 6.2f}%     {emo_24h}\nVol: ${usd_vol_24h:,.2f} |  {btc_vol_24h:,.8f} BTC```"
                usd_1h = info['market_data']['price_change_percentage_1h_in_currency']['usd']
                usd_24h = info['market_data']['price_change_percentage_24h_in_currency']['usd']
                res = res.format(symbol=symbol.upper(),
                                 usd_price=info['market_data']['current_price']['usd'],
                                 btc_price=info['market_data']['current_price']['btc'],
                                 usd_1h=usd_1h,
                                 usd_24h=usd_24h,
                                 emo_1h=getEmoji(usd_1h),
                                 emo_24h=getEmoji(usd_24h),
                                 usd_vol_24h=info['market_data']['total_volume']['usd'],
                                 btc_vol_24h=info['market_data']['total_volume']['btc'])
            await client.send_message(message.channel, res)

        match = re.search(r'[rR] (\w+)', msg)
        if match:
            symbol = match.group(1).upper()
            if symbol not in RCOINS:
                res = "```This coin is not listed on exchanges we support ðŸ˜¶```"
            else:
                res = "```{} Rank: {}\nMarketCap = ${:,.2f}```"
                res = res.format(symbol, RCOINS[symbol]['rank'], float(RCOINS[symbol]['market_cap'] or 0.0))
            await client.send_message(message.channel, res)

        if msg == "img":
            filename = 'img/123.png'
            fig = plt.figure()
            ax1 = plt.subplot2grid((1,1), (0,0))
            ohlc = [(736536.0, 153.5, 153.93, 153.06, 153.35, 12778195.0), (736535.0, 152.74, 153.84, 151.8, 151.8, 18714400.0), (736534.0, 152.09, 152.44, 149.9, 150.58, 21304700.0), (736531.0, 150.27, 150.44, 148.88, 149.99, 26252630.0), (736530.0, 150.34, 151.74, 150.19, 151.5, 17243748.0), (736529.0, 151.02, 151.42, 149.95, 150.48, 20922969.0), (736528.0, 150.08, 150.13, 148.67, 149.2, 17868792.0), (736527.0, 149.56, 150.9, 148.57, 148.82, 23243713.0), (736524.0, 149.04, 149.33, 147.33, 147.97, 20132061.0), (736523.0, 147.77, 148.49, 145.44, 145.5, 25199373.0), (736522.0, 145.74, 146.18, 144.82, 145.87, 24884478.0), (736521.0, 145.53, 145.85, 144.38, 144.73, 19781836.0), (736520.0, 145.06, 145.95, 143.37, 144.11, 21090636.0), (736517.0, 144.18, 144.75, 142.9, 142.9, 19201712.0), (736516.0, 142.73, 143.5, 142.41, 143.02, 24128782.0), (736515.0, 144.09, 144.79, 142.72, 143.69, 21569557.0), (736513.0, 143.5, 145.3001, 143.1, 144.88, 14276812.0), (736510.0, 144.02, 144.96, 143.78, 144.45, 23024107.0), (736509.0, 143.68, 145.13, 142.28, 144.71, 31499368.0), (736508.0, 145.83, 146.11, 143.16, 144.49, 22082432.0), (736507.0, 143.73, 146.16, 143.62, 145.01, 24761891.0), (736506.0, 145.82, 148.28, 145.38, 147.17, 25692361.0), (736503.0, 146.28, 147.16, 145.11, 145.13, 35439389.0), (736502.0, 145.63, 146.7, 145.12, 145.77, 19106294.0), (736501.0, 145.87, 146.07, 144.61, 145.52, 21265751.0), (736500.0, 145.01, 146.87, 144.94, 146.87, 24900073.0), (736499.0, 146.34, 146.74, 143.66, 143.66, 32541404.0), (736496.0, 142.27, 144.5, 142.2, 143.78, 50361093.0), (736495.0, 144.29, 144.48, 142.21, 143.32, 32165373.0), (736494.0, 145.16, 147.5, 143.84, 147.5, 31531232.0), (736493.0, 146.59, 147.45, 145.15, 147.16, 34165445.0), (736492.0, 145.42, 146.09, 142.51, 145.74, 72307330.0), (736489.0, 148.98, 155.19, 146.02, 155.19, 64882657.0), (736488.0, 154.99, 155.54, 154.4, 155.25, 21250798.0), (736487.0, 155.37, 155.98, 154.48, 155.02, 21069647.0), (736486.0, 154.45, 155.81, 153.78, 153.9, 26624926.0), (736485.0, 153.93, 154.45, 153.46, 154.34, 25331662.0), (736482.0, 155.45, 155.45, 152.89, 153.58, 27770715.0), (736481.0, 153.18, 153.33, 152.22, 153.17, 16404088.0), (736480.0, 152.76, 154.17, 152.38, 153.97, 24451164.0), (736479.0, 153.67, 154.43, 153.33, 153.42, 20126851.0), (736475.0, 153.61, 154.24, 153.31, 154.0, 21927637.0), (736474.0, 153.87, 154.35, 153.03, 153.73, 19235598.0), (736473.0, 153.34, 154.17, 152.67, 153.84, 19219154.0), (736472.0, 153.8, 154.9, 153.31, 154.9, 19918871.0), (736471.0, 153.99, 154.58, 152.91, 154.0, 22966437.0), (736468.0, 153.06, 153.98, 152.63, 153.38, 26960788.0), (736467.0, 152.54, 153.34, 151.13, 151.27, 33568215.0), (736466.0, 150.25, 154.57, 149.71, 153.6, 50767678.0), (736465.0, 155.47, 156.06, 154.72, 155.94, 20048478.0), (736464.0, 155.7, 156.65, 155.05, 156.01, 26009719.0), (736461.0, 156.1, 156.42, 154.67, 154.7, 32527017.0), (736460.0, 153.95, 154.07, 152.31, 152.45, 27255058.0), (736459.0, 153.26, 153.94, 152.11, 153.63, 25805692.0), (736458.0, 153.99, 154.88, 153.45, 153.87, 39130363.0), (736457.0, 153.01, 153.7, 149.03, 149.03, 48752413.0), (736454.0, 148.96, 148.98, 146.76, 146.76, 27327725.0), (736453.0, 146.53, 147.14, 145.81, 146.52, 23371872.0), (736452.0, 147.06, 147.49, 144.27, 145.59, 45697034.0), (736451.0, 147.51, 148.09, 146.84, 147.54, 45352194.0), (736450.0, 146.58, 147.2, 144.96, 145.1, 33602943.0), (736447.0, 143.65, 144.3, 143.27, 144.09, 20860358.0), (736446.0, 143.79, 144.16, 143.31, 143.92, 14246347.0), (736445.0, 143.68, 144.6, 143.38, 144.47, 20041241.0), (736444.0, 144.53, 144.9, 143.87, 143.91, 18871501.0), (736443.0, 143.64, 143.95, 143.18, 143.5, 17116599.0), (736440.0, 142.27, 142.68, 141.85, 142.44, 17320928.0), (736439.0, 142.44, 142.92, 141.16, 141.22, 23319562.0), (736438.0, 140.68, 142.0, 140.45, 141.88, 17328375.0), (736437.0, 141.2, 142.04, 141.11, 141.41, 14697544.0), (736436.0, 141.83, 141.88, 140.87, 141.48, 16582094.0), (736432.0, 141.05, 142.38, 141.05, 141.91, 17822880.0), (736431.0, 141.8, 142.15, 141.01, 141.6, 20350000.0), (736430.0, 141.63, 143.35, 140.06, 142.94, 30379376.0), (736429.0, 143.17, 143.88, 142.9, 143.6, 18933397.0), (736426.0, 143.34, 144.18, 143.27, 143.73, 16658543.0), (736425.0, 143.66, 144.52, 143.45, 144.29, 21149034.0), (736424.0, 144.02, 145.46, 143.81, 144.22, 27717854.0), (736423.0, 144.77, 144.89, 143.17, 143.25, 19891354.0), (736422.0, 143.7, 144.12, 143.05, 143.71, 19985714.0), (736419.0, 143.66, 144.27, 143.01, 143.72, 19661651.0), (736418.0, 143.93, 144.5, 143.5, 144.19, 21207252.0), (736417.0, 144.12, 144.49, 143.19, 143.68, 29189955.0)]
            candlestick_ohlc(ax1, ohlc, width=0.4, colorup='#77d879', colordown='#db3f3f')

            for label in ax1.xaxis.get_ticklabels():
                label.set_rotation(45)

            ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
            ax1.xaxis.set_major_locator(mticker.MaxNLocator(10))
            ax1.grid(True)
            

            plt.xlabel('Date')
            plt.ylabel('Price')
            plt.title('ARKbot - Image')
            plt.legend()
            plt.subplots_adjust(left=0.09, bottom=0.20, right=0.94, top=0.90, wspace=0.2, hspace=0)
            # plt.show()
            plt.savefig(filename)
            await client.send_file(message.channel, filename)

client.run(TOKEN)
